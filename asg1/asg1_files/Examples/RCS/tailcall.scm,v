head	1.2;
access;
symbols;
locks;
comment	@# @;


1.2
date	2014.11.01.00.35.08;	author -;	state -;
branches;
next	1.1;

1.1
date	2009.02.13.03.38.42;	author -;	state -;
branches;
next	;


desc
@@


1.2
log
@-
@
text
@#!/afs/cats.ucsc.edu/courses/cmps112-wm/usr/racket/bin/mzscheme -qr
;; $Id: tailcall.scm,v 1.1 2009-02-12 19:38:42-08 - - $

;;
;; Blow the stack by infinite recursion.  In a non-tail recursive
;; language, this would use up the process's stack quota and then
;; crash.  In Scheme, since this function is tail recursive, it
;; acts just like an infinite loop in other languages -- it does
;; not blow up the stack but does use up as much CPU as it can.
;;

(define modulus 1000000)

{define (tailcall count)
        (when (= (remainder count modulus) 0)
              [printf "count = ~a~n" count])
        [tailcall (+ 1 count)]}

(tailcall 0)

@


1.1
log
@-
@
text
@d1 2
a2 2
#!/afs/cats.ucsc.edu/courses/cmps112-wm/usr/mzscheme/bin/mzscheme -qr
;; $Id: tailcall.scm,v 361.4 2009-02-12 19:12:47-08 - - $
@
